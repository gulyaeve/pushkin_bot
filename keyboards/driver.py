from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class DriverCallbacks:
    driver_reg_menu = "driver_reg_menu"
    driver_fio = "driver_fio"
    driver_phone = "driver_phone"
    driver_passport = "driver_passport"
    driver_passport_photo = "driver_passport_photo"
    driver_sts_1 = "driver_sts_1"
    driver_sts_2 = "driver_sts_2"
    driver_back = "driver_back"
    driver_ready = "driver_ready"
    driver_manager_decline = "driver_manager_decline"
    driver_manager_agree = "driver_manager_agree"
    driver_help = "driver_help"
    driver_fare = "driver_fare"
    driver_order_confirm = "driver_order_confirm"
    driver_order_start_location = "driver_order_start_location"
    driver_order_message = "driver_order_message"
    driver_order_finish = "driver_order_finish"


reg_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è",
                callback_data=DriverCallbacks.driver_reg_menu,
            )
        ]
    ]
)


def make_manager_view(driver_id: int) -> InlineKeyboardMarkup:
    manager_view = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå",
                    callback_data=f"{DriverCallbacks.driver_manager_decline}={driver_id}",
                ),
                InlineKeyboardButton(
                    text="‚úÖ",
                    callback_data=f"{DriverCallbacks.driver_manager_agree}={driver_id}",
                ),

            ]
        ]
    )
    return manager_view


def make_driver_reg_menu(
        fio: bool = False,
        phone: bool = False,
        passport: bool = False,
        passport_photo: bool = False,
        sts_photo_1: bool = False,
        sts_photo_2: bool = False):
    reg_menu = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–§–ò–û" if not fio else "–§–ò–û ‚úÖ",
                    callback_data=DriverCallbacks.driver_fio,
                )
            ],
            [
                InlineKeyboardButton(
                    text="–¢–µ–ª–µ—Ñ–æ–Ω" if not phone else "–¢–µ–ª–µ—Ñ–æ–Ω ‚úÖ",
                    callback_data=DriverCallbacks.driver_phone,
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü–∞—Å–ø–æ—Ä—Ç" if not passport else "–ü–∞—Å–ø–æ—Ä—Ç ‚úÖ",
                    callback_data=DriverCallbacks.driver_passport,
                )
            ],
            [
                InlineKeyboardButton(
                    text="–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞" if not passport_photo else "–§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚úÖ",
                    callback_data=DriverCallbacks.driver_passport_photo,
                )
            ],
            [
                InlineKeyboardButton(
                    text="–§–æ—Ç–æ –°–¢–° –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞" if not sts_photo_1 else "–§–æ—Ç–æ –°–¢–° –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚úÖ",
                    callback_data=DriverCallbacks.driver_sts_1,
                )
            ],
            [
                InlineKeyboardButton(
                    text="–§–æ—Ç–æ –°–¢–° –æ–±–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞" if not sts_photo_2 else "–§–æ—Ç–æ –°–¢–° –æ–±–æ—Ä–æ—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚úÖ",
                    callback_data=DriverCallbacks.driver_sts_2,
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
                    callback_data=DriverCallbacks.driver_back,
                ),
                InlineKeyboardButton(
                    text="–ì–æ—Ç–æ–≤–æ",
                    callback_data=DriverCallbacks.driver_ready,
                )
            ],

        ],
        row_width=1,
    )
    return reg_menu


driver_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ–ª–µ–∑–Ω–æ–µ",
                callback_data=DriverCallbacks.driver_help,
            )
        ],
        [
            InlineKeyboardButton(
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–∞",
                callback_data=DriverCallbacks.driver_fare,
            )
        ]
    ]
)


def make_confirm_button(order_id: int) -> InlineKeyboardMarkup:
    driver_order_confirm_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–Ø –±–µ—Ä—É –∑–∞–∫–∞–∑",
                    callback_data=f"{DriverCallbacks.driver_order_confirm}={order_id}"
                )
            ]
        ]
    )
    return driver_order_confirm_button


def make_order_menu(order_id: int) -> InlineKeyboardMarkup:
    driver_order_menu = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–Ø –Ω–∞ –º–µ—Å—Ç–µ –ø–æ–¥–∞—á–∏ üìç",
                    callback_data=f"{DriverCallbacks.driver_order_start_location}={order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞–ø–∏—Å–∞—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä—É üí¨",
                    callback_data=f"{DriverCallbacks.driver_order_message}={order_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ üèÅ",
                    callback_data=f"{DriverCallbacks.driver_order_finish}={order_id}"
                )
            ]
        ]
    )
    return driver_order_menu


def make_customer_answer_button(order_id: int) -> InlineKeyboardMarkup:
    customer_answer = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–≤–µ—Ç–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—é",
                    callback_data=f"customer_answer={order_id}"
                )
            ]
        ]
    )
    return customer_answer
